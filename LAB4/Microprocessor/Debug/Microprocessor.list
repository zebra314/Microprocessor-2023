
Microprocessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002030  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002238  08002238  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002238  08002238  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002238  08002238  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002238  08002238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000008c  080022cc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080022cc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056e2  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001463  00000000  00000000  0002579e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00026c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002508a  00000000  00000000  000278c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006834  00000000  00000000  0004c952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2307  00000000  00000000  00053186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013548d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b4  00000000  00000000  001354e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021a0 	.word	0x080021a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080021a0 	.word	0x080021a0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <init_7seg>:
#include "7seg.h"
#include "helper_functions.h"

// Only allow GPIOA and GPIOB and GPIOC for now
// Can easily extended by adding "else if" cases
int init_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(gpio==GPIOA){
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008b8:	d106      	bne.n	80008c8 <init_7seg+0x24>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <init_7seg+0xf4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <init_7seg+0xf4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	e018      	b.n	80008fa <init_7seg+0x56>
	}
	else if(gpio==GPIOB){
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4a34      	ldr	r2, [pc, #208]	; (800099c <init_7seg+0xf8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <init_7seg+0x3a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <init_7seg+0xf4>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a30      	ldr	r2, [pc, #192]	; (8000998 <init_7seg+0xf4>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	e00d      	b.n	80008fa <init_7seg+0x56>
	}
	else if(gpio==GPIOC){
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <init_7seg+0xfc>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <init_7seg+0x50>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <init_7seg+0xf4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <init_7seg+0xf4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	e002      	b.n	80008fa <init_7seg+0x56>
	}
	else{
		// Error! Add other cases to suit other GPIO pins
		return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f8:	e049      	b.n	800098e <init_7seg+0xea>
	}

	// Set GPIO pins to output mode (01)
	// First Clear bits(&) then set bits(|)
	gpio->MODER &= ~(0b11 << (2*DIN));
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	2103      	movs	r1, #3
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*DIN));
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	0052      	lsls	r2, r2, #1
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	431a      	orrs	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CS));
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	2103      	movs	r1, #3
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	401a      	ands	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CS));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CLK));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	2103      	movs	r1, #3
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CLK));
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

	// Close display test
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DISPLAY_TEST, 0x00);
 8000978:	2300      	movs	r3, #0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	230f      	movs	r3, #15
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f80c 	bl	80009a4 <send_7seg>

	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400
 80009a0:	48000800 	.word	0x48000800

080009a4 <send_7seg>:

void send_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int address, int data){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
	// The payload to send
	int payload = ((address&0xFF)<<8)|(data&0xFF);
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]

	// Start the sending cycles
	// 16 data-bits + 1 CS signal
	int total_cycles = 16+1;
 80009c0:	2311      	movs	r3, #17
 80009c2:	617b      	str	r3, [r7, #20]

	for(int a=1;a<=total_cycles;a++){
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	e02f      	b.n	8000a2a <send_7seg+0x86>
		// Reset CLK when enter
		reset_gpio(gpio, CLK);
 80009ca:	6839      	ldr	r1, [r7, #0]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f8c3 	bl	8000b58 <reset_gpio>

		// Set DIN according to data except for last cycle(CS)
		if(((payload>>(total_cycles-1-a))&0x1) && a!=total_cycles){
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	fa42 f303 	asr.w	r3, r2, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <send_7seg+0x56>
 80009e8:	69fa      	ldr	r2, [r7, #28]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d004      	beq.n	80009fa <send_7seg+0x56>
			set_gpio(gpio, DIN);
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f89c 	bl	8000b30 <set_gpio>
 80009f8:	e003      	b.n	8000a02 <send_7seg+0x5e>
		}
		else{
			reset_gpio(gpio, DIN);
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f8ab 	bl	8000b58 <reset_gpio>
		}

		// Set CS at last cycle
		if(a==total_cycles){
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d104      	bne.n	8000a14 <send_7seg+0x70>
			set_gpio(gpio, CS);
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f88f 	bl	8000b30 <set_gpio>
 8000a12:	e003      	b.n	8000a1c <send_7seg+0x78>
		}
		else{
			reset_gpio(gpio, CS);
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f89e 	bl	8000b58 <reset_gpio>
		}

		// Set CLK when leaving (7seg set data at rising edge)
		set_gpio(gpio, CLK);
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f886 	bl	8000b30 <set_gpio>
	for(int a=1;a<=total_cycles;a++){
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	3301      	adds	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	ddcb      	ble.n	80009ca <send_7seg+0x26>
	}

	return;
 8000a32:	bf00      	nop
}
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <display_number>:

int display_number(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int num, int num_digs){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	if(num<0){
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da0d      	bge.n	8000a6c <display_number+0x30>
		send_7seg(gpio, DIN, CS, CLK, num_digs+1,10); // show the negative sign
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	3301      	adds	r3, #1
 8000a54:	220a      	movs	r2, #10
 8000a56:	9201      	str	r2, [sp, #4]
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff ff9f 	bl	80009a4 <send_7seg>
		num*=-1;
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	425b      	negs	r3, r3
 8000a6a:	623b      	str	r3, [r7, #32]
	}
	for(int i=1;i<=num_digs;i++){
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e01f      	b.n	8000ab2 <display_number+0x76>
		send_7seg(gpio, DIN, CS, CLK, i, num % 10);
 8000a72:	6a39      	ldr	r1, [r7, #32]
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <display_number+0xcc>)
 8000a76:	fb83 2301 	smull	r2, r3, r3, r1
 8000a7a:	109a      	asrs	r2, r3, #2
 8000a7c:	17cb      	asrs	r3, r1, #31
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	1aca      	subs	r2, r1, r3
 8000a8a:	9201      	str	r2, [sp, #4]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff ff84 	bl	80009a4 <send_7seg>
		num /= 10;
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <display_number+0xcc>)
 8000aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa4:	1092      	asrs	r2, r2, #2
 8000aa6:	17db      	asrs	r3, r3, #31
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	623b      	str	r3, [r7, #32]
	for(int i=1;i<=num_digs;i++){
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dddb      	ble.n	8000a72 <display_number+0x36>
	}
	for(int i=num_digs+1;i<=8;i++){
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	e014      	b.n	8000aec <display_number+0xb0>
		num /= 10;
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <display_number+0xcc>)
 8000ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aca:	1092      	asrs	r2, r2, #2
 8000acc:	17db      	asrs	r3, r3, #31
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	623b      	str	r3, [r7, #32]
		send_7seg(gpio, DIN, CS, CLK, i, 15);
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ff5f 	bl	80009a4 <send_7seg>
	for(int i=num_digs+1;i<=8;i++){
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	dde7      	ble.n	8000ac2 <display_number+0x86>
	}
	if(num != 0)
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <display_number+0xc2>
		return -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afc:	e000      	b.n	8000b00 <display_number+0xc4>
	return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	66666667 	.word	0x66666667

08000b0c <read_gpio>:
#include "helper_functions.h"

int read_gpio(GPIO_TypeDef* gpio, int pin){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	return (gpio->IDR >> pin) & 1;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b20:	f003 0301 	and.w	r3, r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <set_gpio>:
void set_gpio(GPIO_TypeDef* gpio, int pin){
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	gpio->BSRR |= (1 << pin);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	fa01 f202 	lsl.w	r2, r1, r2
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <reset_gpio>:
void reset_gpio(GPIO_TypeDef* gpio, int pin){
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	gpio->BRR |= (1 << pin);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	2101      	movs	r1, #1
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <num_digits>:
		loop_cnt--;
	}
	return;
}

int num_digits(int x){
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if(x<0) x*=-1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da02      	bge.n	8000b94 <num_digits+0x14>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	425b      	negs	r3, r3
 8000b92:	607b      	str	r3, [r7, #4]
	if(x == 0){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <num_digits+0x1e>
		return 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e011      	b.n	8000bc2 <num_digits+0x42>
	}
	int res = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
	while(x){
 8000ba2:	e00a      	b.n	8000bba <num_digits+0x3a>
		res++;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
		x /= 10;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <num_digits+0x50>)
 8000bae:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb2:	1092      	asrs	r2, r2, #2
 8000bb4:	17db      	asrs	r3, r3, #31
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	607b      	str	r3, [r7, #4]
	while(x){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <num_digits+0x24>
	}
	return res;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	66666667 	.word	0x66666667

08000bd4 <init_keypad>:
	{15, 0, 14, 13}
};

// Only allow GPIOA and GPIOB for now
// Can easily extended by adding "else if" cases
int init_keypad(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(ROW_gpio==GPIOA || COL_gpio==GPIOA){
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be8:	d003      	beq.n	8000bf2 <init_keypad+0x1e>
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf0:	d105      	bne.n	8000bfe <init_keypad+0x2a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <init_keypad+0x168>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a51      	ldr	r2, [pc, #324]	; (8000d3c <init_keypad+0x168>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if(ROW_gpio==GPIOB || COL_gpio==GPIOB){
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <init_keypad+0x16c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d003      	beq.n	8000c0e <init_keypad+0x3a>
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4a4d      	ldr	r2, [pc, #308]	; (8000d40 <init_keypad+0x16c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d105      	bne.n	8000c1a <init_keypad+0x46>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000c0e:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <init_keypad+0x168>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a4a      	ldr	r2, [pc, #296]	; (8000d3c <init_keypad+0x168>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e052      	b.n	8000cc6 <init_keypad+0xf2>
		// Set GPIO pins to output mode (01)
		COL_gpio->MODER &= ~(0b11 << (2*(COL_pin+a)));
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6839      	ldr	r1, [r7, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	440a      	add	r2, r1
 8000c2a:	0052      	lsls	r2, r2, #1
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	43d2      	mvns	r2, r2
 8000c34:	401a      	ands	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	601a      	str	r2, [r3, #0]
		COL_gpio->MODER |= (0b01 << (2*(COL_pin+a)));
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	440a      	add	r2, r1
 8000c44:	0052      	lsls	r2, r2, #1
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to very high speed mode (11)
		COL_gpio->OSPEEDR &= ~(0b11 << (2*(COL_pin+a)));
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	6839      	ldr	r1, [r7, #0]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	440a      	add	r2, r1
 8000c5c:	0052      	lsls	r2, r2, #1
 8000c5e:	2103      	movs	r1, #3
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	609a      	str	r2, [r3, #8]
		COL_gpio->OSPEEDR |= (0b11 << (2*(COL_pin+a)));
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	6839      	ldr	r1, [r7, #0]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	440a      	add	r2, r1
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	2103      	movs	r1, #3
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	609a      	str	r2, [r3, #8]
		// Set GPIO pins to open drain mode (1)
		COL_gpio->OTYPER &= ~(0b1 << (COL_pin+a));
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	440a      	add	r2, r1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f202 	lsl.w	r2, r1, r2
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	401a      	ands	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	605a      	str	r2, [r3, #4]
		COL_gpio->OTYPER |= (0b1 << (COL_pin+a));
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	440a      	add	r2, r1
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	431a      	orrs	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	605a      	str	r2, [r3, #4]
		// Set Output to high
		set_gpio(COL_gpio, COL_pin+a);
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	68b8      	ldr	r0, [r7, #8]
 8000cbc:	f7ff ff38 	bl	8000b30 <set_gpio>
	for(int a=0;a<4;a++){
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	dda9      	ble.n	8000c20 <init_keypad+0x4c>
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e02c      	b.n	8000d2c <init_keypad+0x158>
		// Set GPIO pins to input mode (00)
		ROW_gpio->MODER &= ~(0b11 << (2*(ROW_pin+a)));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	440a      	add	r2, r1
 8000cdc:	0052      	lsls	r2, r2, #1
 8000cde:	2103      	movs	r1, #3
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	43d2      	mvns	r2, r2
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	601a      	str	r2, [r3, #0]
		ROW_gpio->MODER |= (0b00 << (2*(ROW_pin+a)));
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to Pull-Down mode (10)
		ROW_gpio->PUPDR &= ~(0b11 << (2*(ROW_pin+a)));
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	440a      	add	r2, r1
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	2103      	movs	r1, #3
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	60da      	str	r2, [r3, #12]
		ROW_gpio->PUPDR |= (0b10 << (2*(ROW_pin+a)));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	440a      	add	r2, r1
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	431a      	orrs	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	60da      	str	r2, [r3, #12]
	for(int a=0;a<4;a++){
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	ddcf      	ble.n	8000cd2 <init_keypad+0xfe>
	}

	return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	00000000 	.word	0x00000000

08000d48 <check_keypad_input_one>:

int check_keypad_input_one(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin, int x, int y){
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
	int cycles = 400;
 8000d56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d5a:	617b      	str	r3, [r7, #20]
	// Set Column to push-pull mode
	COL_gpio->OTYPER &= ~(1 << (COL_pin+y));
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	6839      	ldr	r1, [r7, #0]
 8000d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d64:	440a      	add	r2, r1
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	605a      	str	r2, [r3, #4]
	// Count the total number of time it is pressed in a certain period
	int cnt = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
	for(int a=0;a<cycles;a++){
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	e00d      	b.n	8000d9a <check_keypad_input_one+0x52>
		cnt += read_gpio(ROW_gpio, ROW_pin+x);
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d82:	4413      	add	r3, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fec0 	bl	8000b0c <read_gpio>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4413      	add	r3, r2
 8000d92:	61fb      	str	r3, [r7, #28]
	for(int a=0;a<cycles;a++){
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	3301      	adds	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbed      	blt.n	8000d7e <check_keypad_input_one+0x36>
	}
	// Set Column back to open drain mode
	COL_gpio->OTYPER |= (1 << (COL_pin+y));
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	6839      	ldr	r1, [r7, #0]
 8000da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000daa:	440a      	add	r2, r1
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	431a      	orrs	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	605a      	str	r2, [r3, #4]
	// return if the key is pressed(1) or not(0)
	return (cnt > (cycles*0.7));
 8000db8:	69f8      	ldr	r0, [r7, #28]
 8000dba:	f7ff fc81 	bl	80006c0 <__aeabi_i2d>
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff fc7c 	bl	80006c0 <__aeabi_i2d>
 8000dc8:	a30b      	add	r3, pc, #44	; (adr r3, 8000df8 <check_keypad_input_one+0xb0>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff f9fb 	bl	80001c8 <__aeabi_dmul>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	460e      	mov	r6, r1
 8000dda:	4620      	mov	r0, r4
 8000ddc:	4629      	mov	r1, r5
 8000dde:	f7ff fd57 	bl	8000890 <__aeabi_dcmpgt>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <check_keypad_input_one+0xa4>
 8000de8:	2300      	movs	r3, #0
 8000dea:	461e      	mov	r6, r3
 8000dec:	b2f3      	uxtb	r3, r6
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	66666666 	.word	0x66666666
 8000dfc:	3fe66666 	.word	0x3fe66666

08000e00 <check_press>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int check_press(int i, int j){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	return check_keypad_input_one(ROW_gpio, COL_gpio, ROW_pin, COL_pin, i, j);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2306      	movs	r3, #6
 8000e14:	2203      	movs	r2, #3
 8000e16:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <check_press+0x2c>)
 8000e1c:	f7ff ff94 	bl	8000d48 <check_keypad_input_one>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	48000400 	.word	0x48000400

08000e30 <display>:
void display(int a, int b){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	display_number(SEG_gpio, DIN_pin, CS_pin, CLK_pin, a, b);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	2202      	movs	r2, #2
 8000e46:	2103      	movs	r1, #3
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <display+0x28>)
 8000e4a:	f7ff fdf7 	bl	8000a3c <display_number>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	48000800 	.word	0x48000800

08000e5c <input_multi>:
			display_number(SEG_gpio, DIN_pin, CS_pin, CLK_pin, result, num_digits(result));
		}
	}
}

void input_multi(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09e      	sub	sp, #120	; 0x78
 8000e60:	af00      	add	r7, sp, #0
	int input = 0, num = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	657b      	str	r3, [r7, #84]	; 0x54
 8000e66:	2300      	movs	r3, #0
 8000e68:	677b      	str	r3, [r7, #116]	; 0x74
	int first = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	673b      	str	r3, [r7, #112]	; 0x70
	while(1){
		if(first == 1)
 8000e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d104      	bne.n	8000e7e <input_multi+0x22>
			// show nothing if the first time
			display(0, 0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff ffda 	bl	8000e30 <display>
 8000e7c:	e007      	b.n	8000e8e <input_multi+0x32>
		else
			display(num, num_digits(num));
 8000e7e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000e80:	f7ff fe7e 	bl	8000b80 <num_digits>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4619      	mov	r1, r3
 8000e88:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000e8a:	f7ff ffd1 	bl	8000e30 <display>

		for(int i=0;i<16;i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e92:	e09d      	b.n	8000fd0 <input_multi+0x174>
			int a = keypad_space[i][0];
 8000e94:	4a55      	ldr	r2, [pc, #340]	; (8000fec <input_multi+0x190>)
 8000e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e9c:	653b      	str	r3, [r7, #80]	; 0x50
			int b = keypad_space[i][1];
 8000e9e:	4a53      	ldr	r2, [pc, #332]	; (8000fec <input_multi+0x190>)
 8000ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(check_press(a,b)){
 8000eaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000eac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000eae:	f7ff ffa7 	bl	8000e00 <check_press>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8088 	beq.w	8000fca <input_multi+0x16e>
				// if one been pressed
				input = keypad[a][b];
 8000eba:	494d      	ldr	r1, [pc, #308]	; (8000ff0 <input_multi+0x194>)
 8000ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ebe:	009a      	lsls	r2, r3, #2
 8000ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54

				if(input == 14)// clear
 8000eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ecc:	2b0e      	cmp	r3, #14
 8000ece:	f000 8086 	beq.w	8000fde <input_multi+0x182>
					return;
				if(num_digits(num)>=8) break;
 8000ed2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ed4:	f7ff fe54 	bl	8000b80 <num_digits>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	dc7d      	bgt.n	8000fda <input_multi+0x17e>
				if(first == 1) first--;
 8000ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <input_multi+0x8e>
 8000ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	673b      	str	r3, [r7, #112]	; 0x70

				int keyboard_state[16] = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 f94d 	bl	8002190 <memset>
				int press = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	66bb      	str	r3, [r7, #104]	; 0x68
				while(press == 1){
 8000efa:	e034      	b.n	8000f66 <input_multi+0x10a>
					press = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66bb      	str	r3, [r7, #104]	; 0x68
					for(int j=0;j<16;j++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	667b      	str	r3, [r7, #100]	; 0x64
 8000f04:	e02c      	b.n	8000f60 <input_multi+0x104>
						int c = keypad_space[j][0];
 8000f06:	4a39      	ldr	r2, [pc, #228]	; (8000fec <input_multi+0x190>)
 8000f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f0a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
						int d = keypad_space[j][1];
 8000f10:	4a36      	ldr	r2, [pc, #216]	; (8000fec <input_multi+0x190>)
 8000f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
						if(check_press(c,d)){
 8000f1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000f20:	f7ff ff6e 	bl	8000e00 <check_press>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d017      	beq.n	8000f5a <input_multi+0xfe>
							if(keypad[c][d]==14) return;
 8000f2a:	4931      	ldr	r1, [pc, #196]	; (8000ff0 <input_multi+0x194>)
 8000f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2e:	009a      	lsls	r2, r3, #2
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	4413      	add	r3, r2
 8000f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f38:	2b0e      	cmp	r3, #14
 8000f3a:	d052      	beq.n	8000fe2 <input_multi+0x186>
							keyboard_state[keypad[c][d]] = 1;
 8000f3c:	492c      	ldr	r1, [pc, #176]	; (8000ff0 <input_multi+0x194>)
 8000f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f40:	009a      	lsls	r2, r3, #2
 8000f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f44:	4413      	add	r3, r2
 8000f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	3378      	adds	r3, #120	; 0x78
 8000f4e:	443b      	add	r3, r7
 8000f50:	2201      	movs	r2, #1
 8000f52:	f843 2c74 	str.w	r2, [r3, #-116]
							press = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	66bb      	str	r3, [r7, #104]	; 0x68
					for(int j=0;j<16;j++){
 8000f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddcf      	ble.n	8000f06 <input_multi+0xaa>
				while(press == 1){
 8000f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d0c7      	beq.n	8000efc <input_multi+0xa0>
						}
					}
				}
				int tmp = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	663b      	str	r3, [r7, #96]	; 0x60
				for(int j = 0; j<16; j++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f74:	e00e      	b.n	8000f94 <input_multi+0x138>
					if(keyboard_state[j] == 1)
 8000f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	3378      	adds	r3, #120	; 0x78
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d103      	bne.n	8000f8e <input_multi+0x132>
						tmp+=j;
 8000f86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8a:	4413      	add	r3, r2
 8000f8c:	663b      	str	r3, [r7, #96]	; 0x60
				for(int j = 0; j<16; j++){
 8000f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f90:	3301      	adds	r3, #1
 8000f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	dded      	ble.n	8000f76 <input_multi+0x11a>
				}

				for(int j = 0; j<num_digits(tmp); j++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f9e:	e008      	b.n	8000fb2 <input_multi+0x156>
					num *=10;
 8000fa0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
				for(int j = 0; j<num_digits(tmp); j++){
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	3301      	adds	r3, #1
 8000fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fb2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000fb4:	f7ff fde4 	bl	8000b80 <num_digits>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	dbef      	blt.n	8000fa0 <input_multi+0x144>
				}
				num+=tmp;
 8000fc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fc4:	4413      	add	r3, r2
 8000fc6:	677b      	str	r3, [r7, #116]	; 0x74
				break;
 8000fc8:	e008      	b.n	8000fdc <input_multi+0x180>
		for(int i=0;i<16;i++){
 8000fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fcc:	3301      	adds	r3, #1
 8000fce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f77f af5e 	ble.w	8000e94 <input_multi+0x38>
 8000fd8:	e749      	b.n	8000e6e <input_multi+0x12>
				if(num_digits(num)>=8) break;
 8000fda:	bf00      	nop
		if(first == 1)
 8000fdc:	e747      	b.n	8000e6e <input_multi+0x12>
					return;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <input_multi+0x188>
							if(keypad[c][d]==14) return;
 8000fe2:	bf00      	nop
			}
		}
	}
}
 8000fe4:	3778      	adds	r7, #120	; 0x78
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	080021b8 	.word	0x080021b8

08000ff4 <part4>:
void part4(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	while(1)
		input_multi();
 8000ff8:	f7ff ff30 	bl	8000e5c <input_multi>
 8000ffc:	e7fc      	b.n	8000ff8 <part4+0x4>
	...

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	if(init_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin) != 0){
 8001006:	2301      	movs	r3, #1
 8001008:	2202      	movs	r2, #2
 800100a:	2103      	movs	r1, #3
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <main+0x88>)
 800100e:	f7ff fc49 	bl	80008a4 <init_7seg>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <main+0x1e>
		// Fail to init 7seg
		return -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	e031      	b.n	8001082 <main+0x82>
	}
	if(init_keypad(ROW_gpio, COL_gpio, ROW_pin, COL_pin) != 0){
 800101e:	2306      	movs	r3, #6
 8001020:	2203      	movs	r2, #3
 8001022:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001026:	4819      	ldr	r0, [pc, #100]	; (800108c <main+0x8c>)
 8001028:	f7ff fdd4 	bl	8000bd4 <init_keypad>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <main+0x38>
		// Fail to init keypad
		return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e024      	b.n	8001082 <main+0x82>
	}

	// Set Decode Mode to non-decode mode
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_DECODE_MODE,0xFF);
 8001038:	23ff      	movs	r3, #255	; 0xff
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	2309      	movs	r3, #9
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	2103      	movs	r1, #3
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <main+0x88>)
 8001048:	f7ff fcac 	bl	80009a4 <send_7seg>
 	 // Set Scan Limit to digit 0 only
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_SCAN_LIMIT,0xFF);
 800104c:	23ff      	movs	r3, #255	; 0xff
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	230b      	movs	r3, #11
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2202      	movs	r2, #2
 8001058:	2103      	movs	r1, #3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <main+0x88>)
 800105c:	f7ff fca2 	bl	80009a4 <send_7seg>
	 // Wakeup 7seg
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_SHUTDOWN,0x01);
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	230c      	movs	r3, #12
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2202      	movs	r2, #2
 800106c:	2103      	movs	r1, #3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <main+0x88>)
 8001070:	f7ff fc98 	bl	80009a4 <send_7seg>

//	part1();
//	part3();
	part4();
 8001074:	f7ff ffbe 	bl	8000ff4 <part4>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 f8df 	bl	800123a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f808 	bl	8001090 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001080:	e7fe      	b.n	8001080 <main+0x80>
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000800 	.word	0x48000800
 800108c:	48000400 	.word	0x48000400

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b096      	sub	sp, #88	; 0x58
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2244      	movs	r2, #68	; 0x44
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f876 	bl	8002190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b6:	f000 fa29 	bl	800150c <HAL_PWREx_ControlVoltageScaling>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c0:	f000 f82c 	bl	800111c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010c4:	2310      	movs	r3, #16
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d0:	2360      	movs	r3, #96	; 0x60
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fa6b 	bl	80015b8 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010e8:	f000 f818 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fe33 	bl	8001d70 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001110:	f000 f804 	bl	800111c <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3758      	adds	r7, #88	; 0x58
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6613      	str	r3, [r2, #96]	; 0x60
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6593      	str	r3, [r2, #88]	; 0x58
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f892 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f000 ff97 	bl	8002148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff fef1 	bl	8001000 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001220:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800122c:	08002240 	.word	0x08002240
  ldr r2, =_sbss
 8001230:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001234:	200000ac 	.word	0x200000ac

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f91f 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f80e 	bl	800126c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff ff64 	bl	8001128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d023      	beq.n	80012c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_InitTick+0x70>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_InitTick+0x6c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f91d 	bl	80014d6 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10f      	bne.n	80012c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d809      	bhi.n	80012bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b0:	f000 f8f5 	bl	800149e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_InitTick+0x74>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e007      	b.n	80012cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e004      	b.n	80012cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e001      	b.n	80012cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000088 	.word	0x20000088
 80012dc:	20000080 	.word	0x20000080
 80012e0:	20000084 	.word	0x20000084

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000088 	.word	0x20000088
 8001308:	200000a8 	.word	0x200000a8

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200000a8 	.word	0x200000a8

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5c 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	d130      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d038      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2232      	movs	r2, #50	; 0x32
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	e002      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f2      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d110      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d007      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000080 	.word	0x20000080
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3ca      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4b97      	ldr	r3, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4b94      	ldr	r3, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80e4 	beq.w	80017b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_OscConfig+0x4a>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	f040 808b 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8087 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x62>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3a2      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_RCC_OscConfig+0x7c>
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	e005      	b.n	8001640 <HAL_RCC_OscConfig+0x88>
 8001634:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	4293      	cmp	r3, r2
 8001642:	d223      	bcs.n	800168c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd1d 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e383      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001658:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	496d      	ldr	r1, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001676:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e025      	b.n	80016d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a65      	ldr	r2, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	495b      	ldr	r1, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fcdd 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e343      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f000 fc4a 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b52      	ldr	r3, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	4950      	ldr	r1, [pc, #320]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_RCC_OscConfig+0x278>)
 80016f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fdb5 	bl	800126c <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d052      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	e327      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a42      	ldr	r2, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fdf2 	bl	800130c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fdee 	bl	800130c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e310      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4931      	ldr	r1, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	492c      	ldr	r1, [pc, #176]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e01a      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178a:	f7ff fdbf 	bl	800130c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001792:	f7ff fdbb 	bl	800130c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2dd      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x1da>
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d074      	beq.n	80018aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x21a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d10e      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d064      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d160      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e2ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x24a>
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e026      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d115      	bne.n	8001838 <HAL_RCC_OscConfig+0x280>
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x298>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	080021f8 	.word	0x080021f8
 8001830:	20000080 	.word	0x20000080
 8001834:	20000084 	.word	0x20000084
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9f      	ldr	r2, [pc, #636]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9c      	ldr	r2, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fd58 	bl	800130c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fd54 	bl	800130c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e276      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2a8>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fd44 	bl	800130c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fd40 	bl	800130c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e262      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d0>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x310>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x328>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e23f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4973      	ldr	r1, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e040      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fcff 	bl	800130c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fcfb 	bl	800130c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e21d      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b65      	ldr	r3, [pc, #404]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	495f      	ldr	r1, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e018      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fcdb 	bl	800130c <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fcd7 	bl	800130c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1f9      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fcb6 	bl	800130c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fcb2 	bl	800130c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1d4      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3ec>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fc99 	bl	800130c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff fc95 	bl	800130c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1b7      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fc5c 	bl	800130c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7ff fc58 	bl	800130c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x508>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	e029      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x50c>
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	e014      	b.n	8001ae4 <HAL_RCC_OscConfig+0x52c>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a9b      	ldr	r2, [pc, #620]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a97      	ldr	r2, [pc, #604]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff fc0e 	bl	800130c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff fc0a 	bl	800130c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ed      	beq.n	8001af4 <HAL_RCC_OscConfig+0x53c>
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fbf7 	bl	800130c <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fbf3 	bl	800130c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e113      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ed      	bne.n	8001b22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a79      	ldr	r2, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80fe 	beq.w	8001d5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80d0 	bne.w	8001d0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6c:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d130      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d127      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bac:	2a07      	cmp	r2, #7
 8001bae:	bf14      	ite	ne
 8001bb0:	2201      	movne	r2, #1
 8001bb2:	2200      	moveq	r2, #0
 8001bb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d06e      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d069      	beq.n	8001cbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ad      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c10:	f7ff fb7c 	bl	800130c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff fb78 	bl	800130c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e09a      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x784>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c50:	0212      	lsls	r2, r2, #8
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0552      	lsls	r2, r2, #21
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c64:	0852      	lsrs	r2, r2, #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0652      	lsls	r2, r2, #25
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	0912      	lsrs	r2, r2, #4
 8001c72:	0452      	lsls	r2, r2, #17
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4930      	ldr	r1, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c94:	f7ff fb3a 	bl	800130c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fb36 	bl	800130c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e058      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cba:	e050      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04f      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d148      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce4:	f7ff fb12 	bl	800130c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff fb0e 	bl	800130c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e030      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x734>
 8001d0a:	e028      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x780>)
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff faf5 	bl	800130c <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d24:	e00c      	b.n	8001d40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff faf1 	bl	800130c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d905      	bls.n	8001d40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ec      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4905      	ldr	r1, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x7b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
 8001d58:	e001      	b.n	8001d5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	feeefffc 	.word	0xfeeefffc

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0e7      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4970      	ldr	r1, [pc, #448]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b6e      	ldr	r3, [pc, #440]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cf      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d908      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4960      	ldr	r1, [pc, #384]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0a6      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4b54      	ldr	r3, [pc, #336]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e09a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e26:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e08e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e086      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4943      	ldr	r1, [pc, #268]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7ff fa58 	bl	800130c <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff fa54 	bl	800130c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e06e      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d210      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e036      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4910      	ldr	r1, [pc, #64]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f24:	f000 f824 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1fc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f98f 	bl	800126c <HAL_InitTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	080021f8 	.word	0x080021f8
 8001f68:	20000080 	.word	0x20000080
 8001f6c:	20000084 	.word	0x20000084

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11e      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e005      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e004      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d134      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0xa6>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d003      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0xac>
 8002014:	e005      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_GetSysClockFreq+0x110>)
 8002018:	617b      	str	r3, [r7, #20]
      break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0x114>)
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	3301      	adds	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	fb03 f202 	mul.w	r2, r3, r2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0e5b      	lsrs	r3, r3, #25
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002068:	69bb      	ldr	r3, [r7, #24]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	08002208 	.word	0x08002208
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff fa26 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff fa16 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10b      	bne.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d919      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2ba0      	cmp	r3, #160	; 0xa0
 80020e4:	d902      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e010      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d902      	bls.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f8:	2303      	movs	r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e00a      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e004      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b70      	cmp	r3, #112	; 0x70
 800210e:	d101      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <__libc_init_array>:
 8002148:	b570      	push	{r4, r5, r6, lr}
 800214a:	4d0d      	ldr	r5, [pc, #52]	; (8002180 <__libc_init_array+0x38>)
 800214c:	4c0d      	ldr	r4, [pc, #52]	; (8002184 <__libc_init_array+0x3c>)
 800214e:	1b64      	subs	r4, r4, r5
 8002150:	10a4      	asrs	r4, r4, #2
 8002152:	2600      	movs	r6, #0
 8002154:	42a6      	cmp	r6, r4
 8002156:	d109      	bne.n	800216c <__libc_init_array+0x24>
 8002158:	4d0b      	ldr	r5, [pc, #44]	; (8002188 <__libc_init_array+0x40>)
 800215a:	4c0c      	ldr	r4, [pc, #48]	; (800218c <__libc_init_array+0x44>)
 800215c:	f000 f820 	bl	80021a0 <_init>
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	2600      	movs	r6, #0
 8002166:	42a6      	cmp	r6, r4
 8002168:	d105      	bne.n	8002176 <__libc_init_array+0x2e>
 800216a:	bd70      	pop	{r4, r5, r6, pc}
 800216c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002170:	4798      	blx	r3
 8002172:	3601      	adds	r6, #1
 8002174:	e7ee      	b.n	8002154 <__libc_init_array+0xc>
 8002176:	f855 3b04 	ldr.w	r3, [r5], #4
 800217a:	4798      	blx	r3
 800217c:	3601      	adds	r6, #1
 800217e:	e7f2      	b.n	8002166 <__libc_init_array+0x1e>
 8002180:	08002238 	.word	0x08002238
 8002184:	08002238 	.word	0x08002238
 8002188:	08002238 	.word	0x08002238
 800218c:	0800223c 	.word	0x0800223c

08002190 <memset>:
 8002190:	4402      	add	r2, r0
 8002192:	4603      	mov	r3, r0
 8002194:	4293      	cmp	r3, r2
 8002196:	d100      	bne.n	800219a <memset+0xa>
 8002198:	4770      	bx	lr
 800219a:	f803 1b01 	strb.w	r1, [r3], #1
 800219e:	e7f9      	b.n	8002194 <memset+0x4>

080021a0 <_init>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	bf00      	nop
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr

080021ac <_fini>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr
